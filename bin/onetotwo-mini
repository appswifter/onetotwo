#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const path = require('path')
const basename = dir => path.basename(dir),
    join = (dir, file) => path.join(dir, file)
const scan = require('../lib/scan')
const print = require('../lib/print')
const createNode = require('../lib/utils').createNode
const watch = require('../lib/watch')
const parse = require('../lib/parser')
const generate = require('../lib/codegen').generate
const chokidar = require('chokidar');
const config = require('../lib/config')

const wxmlRE = /(.+)\.wxml$/
const jhmlRE = /.+\.jhml\.wxml$/
const configRE = /^jhml.config.js$/

program
    .usage('[project-path]')


program.on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # begin watch a mini-program to work'))
    console.log('    $ onetotwo mini project-path')
})

function help() {
    program.parse(process.argv)
    if (program.args.length < 1) return program.help()
}

help()

function mark(root) {
    function walk(childrens) {
        for (let child of childrens) {
            if (child.children) walk(child.children)
            const file = child.name
            const wxmlMatch = file.match(wxmlRE)
            if (!wxmlMatch) continue
            child.parent && (child.parent.work = true)
            if (!jhmlRE.test(file)) continue
            child.parent.finish = true  // mark whether create jhml file
            child.watch = true
        }
    }
    walk(root.children)

    for (let child of root.children) {
        if (child.name.match(configRE)) {
            child.config = true
        }
    }
}

function create(root) {
    function walk(childrens) {
        for (let child of childrens) {
            if (child.children) walk(child.children)

            if (child.work && !child.finish) {
                const dir = join(child.path, child.name + '.jhml.wxml')
                fs.openSync(dir, 'w')
            
                const node = createNode(dir, 'file', child.deep + 1, child)
                node.watch = true
                child.children.push(node)
            }
        }
    }

    walk(root.children)
}

function work(root, config_info) {
    function walk(childrens) {
        for (let child of childrens) {
            if (child.watch) {
                watch(child.path, (template, err) => {
                    if (err) {
                        return 
                    }
                    const ast = parse(template.trim(), config_info)
                    let {html, css} = generate(ast)
                    // console.log(css)
                    let dest_wxml_path = child.path.replace('.jhml', '')
                    let dest_wxss_path = dest_wxml_path.replace(/wxml$/g, 'wxss')
                    
                    fs.writeFile(dest_wxml_path, html, err => {
                        if (!err) {
                            let name = path.basename(dest_wxml_path)
                            console.log(chalk.green(`write html to ${name}`))
                        }
                    })

                    fs.writeFile(dest_wxss_path, css, err => {
                        if (!err) {
                            let name = path.basename(dest_wxss_path) 
                            console.log(chalk.green(`write css to ${name}`))
                        }
                    })
                })
            }
            if (child.children) {
                walk(child.children)
            }
        }
    }

    walk(root.children)
}

let projPath = program.args[0]

// chokidar.watch(projPath,{
//     ignored: /(^|[\/\\])\../,
//     persistent: true
//   }).on('addDir', path => console.log(`Directory ${path} has been added`))
config.createAndReadConfig(projPath).then(config_path => {

    let config_info = require(config_path)

    scan(projPath).then((root) => {
        mark(root)
        create(root)
        print(root)
        work(root, config_info)

    }, (reason) => {
        console.log(chalk.red(` ${reason}`))
    })
})
